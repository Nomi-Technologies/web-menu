{"version":3,"sources":["config.js","components/DishTile.js","components/MenuCategoryPanel.js","components/FilterSlideUpPanel.js","screens/MenuScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DishTile","Jumbotron","className","this","props","dish","name","description","React","Component","MenuCategoryPanel","dishes","map","key","FilterSlideUpPanel","state","expanded","selected","Set","onExpansionChanged","onApplyFilter","setState","tags","tag_keys","Object","keys","rows","i","cols","j","length","push","Col","has","id","onClick","tag","delete","add","Row","noGutters","Container","size","Button","variant","disabled","onClearFilter","bind","genGrid","apiBaseUrl","require","MenuScreen","error","menu","tabIndex","excludedDishes","panelExpanded","fetch","then","res","json","data","parseMenu","catch","err","categories","dishesByCategory","dishesByTags","forEach","includes","category","index","lastIndex","excluded","t","d","originalDishes","filtered","selectedIndex","forceRenderTabPanel","onSelect","selectedTabClassName","selectedTabPanelClassName","c","getDishByCategoryWithFilter","onPanelExpansionChanged","App","restaurantId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4a700173.chunk.js","sourcesContent":["module.exports = {\n  'apiBaseUrl': {\n    'development': 'http://localhost:3000',\n    'production': 'https://nomi-menu-service.herokuapp.com'\n  }\n}","import React from 'react';\nimport './DishTile.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nexport default class DishTile extends React.Component {\n\n  render() {\n    return (<Jumbotron className='dish-tile'>\n      <div className='dish-name'>{this.props.dish.name}</div>\n      <div className='separator'></div>\n      <div className='description'>{this.props.dish.description}</div>\n    </Jumbotron>);\n  }\n}","import React from 'react';\nimport DishTile from './DishTile';\nimport './MenuCategoryPanel.css';\n\nexport default class MenuCategoryPanel extends React.Component {\n\n  render() {\n    return (<div className='dish-list-wrapper'>\n      {this.props.dishes.map(dish => \n        <DishTile key={dish.name} dish={dish}/>\n      )}\n    </div>);\n  }\n}\n","import React from 'react';\nimport './FilterSlideUpPanel.css';\nimport { Button, Container, Row, Col } from 'react-bootstrap';\n\nexport default class FilterSlideUpPanel extends React.Component {\n\n  state = {\n    expanded: false,\n    selected: new Set(),\n  };\n\n  onExpansionChanged() {\n    const expanded = this.props.expanded;\n    this.props.onExpansionChanged(!expanded);\n  }\n\n  onApplyFilter() {\n    this.props.onApplyFilter(this.state.selected, false);\n  }\n\n  onClearFilter() {\n    const selected = new Set();\n    this.setState({ selected: selected });\n    this.props.onApplyFilter(selected, this.state.expanded);\n  }\n\n  genGrid() {\n    const tags = this.props.tags;\n    const tag_keys = Object.keys(tags);\n    let rows = [];\n    for (let i = 0; i < tag_keys.length; i += 3) {\n      let cols = [];\n      for (let j = 0; j < 3; ++j) {\n        if (i + j >= tag_keys.length) { \n          cols.push(<Col key={j}></Col>);\n          continue;\n        }\n        cols.push(<Col key={j}>\n          <div \n            className={\n              this.state.selected.has(tags[tag_keys[i+j]].id)? \n                'tag-selected': 'tag-unselected'\n            }\n            onClick={() => {\n              const tag = tags[tag_keys[i+j]];\n              let selected = this.state.selected;\n              if (selected.has(tag.id)) { selected.delete(tag.id); }\n              else { selected.add(tag.id); }\n              this.setState({ selected: selected });\n            }}\n          >\n            {tags[tag_keys[i+j]].name}\n          </div>\n        </Col>);\n      }\n      rows.push(<Row noGutters={true} key={i}>{cols}</Row>);\n    }\n    return (\n      <div className='grid-container'><Container>{rows}</Container></div>\n    );\n  }\n  \n  render() {\n    return (\n      <div className='slide-up-panel'>\n        <div className='panel-header'>\n          <div id='header-row'>\n            <div id='filter-txt' className='panel-header-element'>\n              Filters\n            </div>\n            <div id='count' className='panel-header-element' >\n              <div id='counter'\n                className={this.state.selected.size > 0? 'bg-danger': ''}\n              >\n                {this.state.selected.size}\n              </div>\n            </div>\n            <div id='spacer' className='panel-header-element'></div>\n            <div id='clear-btn-wrapper' className='panel-header-element'>\n              <Button id='clear-btn'\n                variant='secondary'\n                disabled={this.state.selected.size === 0}\n                onClick={this.onClearFilter.bind(this)}\n              >\n                Clear\n              </Button>\n            </div>\n            <div id='expand-btn' \n              className='panel-header-element'\n              onClick={this.onExpansionChanged.bind(this)}\n            >\n              Expand\n            </div>\n            \n          </div>\n        </div>\n        {this.props.expanded?\n          <div className='panel-body'>\n            {this.genGrid()}\n            <Button \n              id='save-btn'\n              variant='warning'\n              onClick={this.onApplyFilter.bind(this)}\n            >\n              Apply\n            </Button>\n            <div></div>\n          </div>\n          :\n          <div></div>\n        }\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport MenuCategoryPanel from '../components/MenuCategoryPanel';\nimport FilterSlideUpPanel from '../components/FilterSlideUpPanel';\nimport '../index.css';\n\nconst { apiBaseUrl } = require('../config');\n\nclass MenuScreen extends React.Component {\n\n  state = {\n    error: null,\n    menu: null,\n    tabIndex: 0,\n    excludedDishes: new Set(),\n    panelExpanded: false,\n  };\n\n  componentDidMount() {\n    fetch(`${apiBaseUrl[process.env.NODE_ENV]}/webApi/dishes/1`)\n      .then(res => res.json())\n      .then(data => {\n        const menu = this.parseMenu(data);\n        this.setState({ \n          menu: menu,\n        });\n      })\n      .catch(err => this.setState({ error: err }));\n  }\n\n  parseMenu(data) {\n    // *********************** menu **************************\n    let menu = {\n      categories: [],\n      dishes: [],\n      dishesByCategory: {},\n      dishesByTags: {},\n      tags: {},\n    };\n\n    data.forEach(dish => {\n      menu.dishes[dish.id] = dish;\n      if (!menu.categories.includes(dish.category.name)) {\n        menu.categories.push(dish.category.name);\n        menu.dishesByCategory[dish.category.name] = [];\n      }\n      menu.dishesByCategory[dish.category.name].push(dish);\n      dish.tags.forEach(tag => {\n        if (!(tag.id in menu.tags)) {\n          menu.tags[tag.id] = tag;\n          menu.dishesByTags[tag.id] = [];\n        }\n        menu.dishesByTags[tag.id].push(dish);\n      });\n    });\n    return menu;\n  }\n\n  onSelect(index, lastIndex) {\n    if (lastIndex === index) {\n      return;\n    }\n    this.setState({ tabIndex: index });\n  }\n\n  onPanelExpansionChanged(expanded) {\n    this.setState({ panelExpanded: expanded });\n  }\n\n  onApplyFilter(selected, expanded) {\n    let excluded = new Set();\n    selected.forEach(t => \n      this.state.menu.dishesByTags[t].forEach(d => excluded.add(d.id))\n    );\n    this.setState({\n      excludedDishes: excluded,\n      panelExpanded: expanded\n    });\n  }\n\n  getDishByCategoryWithFilter(category) {\n    const originalDishes = this.state.menu.dishesByCategory[category];\n    let filtered = [];\n    originalDishes.forEach(d => {\n      if (!this.state.excludedDishes.has(d.id)) {\n        filtered.push(d);\n      }\n    });\n    return filtered;\n  }\n\n  render() {\n    const menu = this.state.menu;\n    if (menu) {\n      return (\n        <div className='menu-screen-wrapper'>\n          <Tabs\n            selectedIndex={this.state.tabIndex}\n            forceRenderTabPanel={true}\n            onSelect={this.onSelect.bind(this)}\n            selectedTabClassName='menu-tab-selected'\n            selectedTabPanelClassName='menu-panel-selected'\n          >\n            <TabList className='menu-tabs'>\n              {menu.categories.map(c =>\n                <Tab className='menu-tab' key={c}>{c}</Tab>\n              )}\n            </TabList>\n            {menu.categories.map(c => {\n              const dishes = this.getDishByCategoryWithFilter(c);\n              return <TabPanel key={c} className='menu-panel'>\n                <MenuCategoryPanel dishes={dishes}/>\n              </TabPanel>\n            })}\n          </Tabs>\n          <div className='slide-up-panel-wrapper'>\n            <FilterSlideUpPanel\n              tags={menu.tags}\n              expanded={this.state.panelExpanded}\n              onExpansionChanged={this.onPanelExpansionChanged.bind(this)}\n              onApplyFilter={this.onApplyFilter.bind(this)}\n            />\n          </div>\n        </div>\n      );\n    } else {\n      if (this.state.error) {\n        return <div>{this.state.error}</div>;\n      } else {\n        return <div>Loading...</div>;\n      }\n    }\n    \n  }\n}\n\nexport default MenuScreen;","import React from 'react';\nimport './index.css';\nimport MenuScreen from './screens/MenuScreen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MenuScreen restaurantId={1}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}