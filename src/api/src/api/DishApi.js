/*
 * A collection of Nomi's APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponse', 'model/Dish'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponse'), require('../model/Dish'));
  } else {
    // Browser globals (root is window)
    if (!root.ACollectionOfNomisApIs) {
      root.ACollectionOfNomisApIs = {};
    }
    root.ACollectionOfNomisApIs.DishApi = factory(root.ACollectionOfNomisApIs.ApiClient, root.ACollectionOfNomisApIs.ApiResponse, root.ACollectionOfNomisApIs.Dish);
  }
}(this, function(ApiClient, ApiResponse, Dish) {
  'use strict';

  /**
   * Dish service.
   * @module api/DishApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DishApi. 
   * @alias module:api/DishApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiDishesDishIdDelete operation.
     * @callback module:api/DishApi~apiDishesDishIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} dishId ID of dish
     * @param {module:api/DishApi~apiDishesDishIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDishesDishIdDelete = function(dishId, callback) {
      var postBody = null;

      // verify the required parameter 'dishId' is set
      if (dishId === undefined || dishId === null) {
        throw new Error("Missing the required parameter 'dishId' when calling apiDishesDishIdDelete");
      }


      var pathParams = {
        'dishId': dishId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/dishes/{dishId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDishesDishIdGet operation.
     * @callback module:api/DishApi~apiDishesDishIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} dishId ID of dish
     * @param {module:api/DishApi~apiDishesDishIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDishesDishIdGet = function(dishId, callback) {
      var postBody = null;

      // verify the required parameter 'dishId' is set
      if (dishId === undefined || dishId === null) {
        throw new Error("Missing the required parameter 'dishId' when calling apiDishesDishIdGet");
      }


      var pathParams = {
        'dishId': dishId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/dishes/{dishId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDishesDishIdPut operation.
     * @callback module:api/DishApi~apiDishesDishIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} dishId ID of dish
     * @param {module:api/DishApi~apiDishesDishIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDishesDishIdPut = function(dishId, callback) {
      var postBody = null;

      // verify the required parameter 'dishId' is set
      if (dishId === undefined || dishId === null) {
        throw new Error("Missing the required parameter 'dishId' when calling apiDishesDishIdPut");
      }


      var pathParams = {
        'dishId': dishId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/dishes/{dishId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDishesGet operation.
     * @callback module:api/DishApi~apiDishesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dish>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the menu information for the user's restaurant.
     * @param {module:api/DishApi~apiDishesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dish>}
     */
    this.apiDishesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Dish];

      return this.apiClient.callApi(
        '/api/dishes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDishesPost operation.
     * @callback module:api/DishApi~apiDishesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dish} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a dish.
     * Tags and category (not categoryId) are ignored if provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/Dish} opts.dish 
     * @param {module:api/DishApi~apiDishesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dish}
     */
    this.apiDishesPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['dish'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Dish;

      return this.apiClient.callApi(
        '/api/dishes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDishesRestaurantIdGet operation.
     * @callback module:api/DishApi~webApiDishesRestaurantIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dish>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the published menu info of a restaurant
     * @param {String} restaurantId unique name of the restaurant
     * @param {module:api/DishApi~webApiDishesRestaurantIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dish>}
     */
    this.webApiDishesRestaurantIdGet = function(restaurantId, callback) {
      var postBody = null;

      // verify the required parameter 'restaurantId' is set
      if (restaurantId === undefined || restaurantId === null) {
        throw new Error("Missing the required parameter 'restaurantId' when calling webApiDishesRestaurantIdGet");
      }


      var pathParams = {
        'restaurantId': restaurantId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Dish];

      return this.apiClient.callApi(
        '/webApi/dishes/{restaurantId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
